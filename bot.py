import asyncio
import json
import subprocess
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

if not TOKEN:
    raise ValueError("TOKEN environment variable is required")

# –°–æ–∑–¥–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞
class PlaylistSettings(StatesGroup):
    waiting_for_url = State()
    waiting_for_start = State()
    waiting_for_end = State()
    waiting_for_reverse = State()
    waiting_for_batch_size = State()

@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –õ–∏–Ω–∫–æ—Ä–µ–∑ ‚Äî –±–æ—Ç –¥–ª—è —Ä–∞–∑—Ä–µ–∑–∞–Ω–∏—è YouTube –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/cut - –Ω–∞—á–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–∞\n"
        "/quick - –±—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç (–≤—Å–µ –≤–∏–¥–µ–æ)\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
    )

@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(
        "üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n"
        "üîß /cut - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
        "   ‚Ä¢ –ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –≤–∏–¥–µ–æ\n"
        "   ‚Ä¢ –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∏–¥–µ–æ  \n"
        "   ‚Ä¢ –û–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫\n"
        "   ‚Ä¢ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏\n\n"
        "‚ö° /quick - –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )

@dp.message(Command("quick"))
async def quick_cmd(message: types.Message, state: FSMContext):
    await message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    await state.set_state(PlaylistSettings.waiting_for_url)
    await state.update_data(is_quick=True)

@dp.message(Command("cut"))
async def cut_cmd(message: types.Message, state: FSMContext):
    await message.answer("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ø–ª–µ–π–ª–∏—Å—Ç:")
    await state.set_state(PlaylistSettings.waiting_for_url)
    await state.update_data(is_quick=False)

@dp.message(PlaylistSettings.waiting_for_url)
async def process_url(message: types.Message, state: FSMContext):
    playlist_url = message.text.strip()
    if "youtube.com/playlist" not in playlist_url and "youtu.be/" not in playlist_url:
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ø–ª–µ–π–ª–∏—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
        return

    await state.update_data(playlist_url=playlist_url)
    data = await state.get_data()
    
    if data.get("is_quick", False):
        # –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        await process_playlist(message, state, {
            "start": 1,
            "end": 999999,
            "reverse": False,
            "batch_size": 50
        })
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        await message.answer(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–µ–π–ª–∏—Å—Ç–∞:\n\n"
            "üìç –° –∫–∞–∫–æ–≥–æ –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç—å? (–≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ 1 –¥–ª—è –Ω–∞—á–∞–ª–∞):"
        )
        await state.set_state(PlaylistSettings.waiting_for_start)

@dp.message(PlaylistSettings.waiting_for_start)
async def process_start(message: types.Message, state: FSMContext):
    try:
        start_num = int(message.text.strip())
        if start_num < 1:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(start=start_num)
        await message.answer(
            f"‚úÖ –ù–∞—á–Ω–µ–º —Å –≤–∏–¥–µ–æ #{start_num}\n\n"
            "üîö –î–æ –∫–∞–∫–æ–≥–æ –≤–∏–¥–µ–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å? (–≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∏–ª–∏ 0 –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–µ–æ):"
        )
        await state.set_state(PlaylistSettings.waiting_for_end)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

@dp.message(PlaylistSettings.waiting_for_end)
async def process_end(message: types.Message, state: FSMContext):
    try:
        end_num = int(message.text.strip())
        if end_num < 0:
            await message.answer("‚ùå –ù–æ–º–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        if end_num == 0:
            end_num = 999999
            
        data = await state.get_data()
        start_num = data.get("start", 1)
        
        if end_num < start_num and end_num != 999999:
            await message.answer(f"‚ùå –ö–æ–Ω–µ—á–Ω–æ–µ –≤–∏–¥–µ–æ ({end_num}) –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ ({start_num}). –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        await state.update_data(end=end_num)
        await message.answer(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–µ–º –≤–∏–¥–µ–æ —Å #{start_num} –ø–æ #{end_num if end_num != 999999 else '–ø–æ—Å–ª–µ–¥–Ω–µ–µ'}\n\n"
            "üîÑ –í –∫–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –≤—ã–≤–æ–¥–∏—Ç—å –≤–∏–¥–µ–æ?\n"
            "–û—Ç–ø—Ä–∞–≤—å:\n"
            "‚Ä¢ 0 - –∫–∞–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ\n"
            "‚Ä¢ 1 - –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"
        )
        await state.set_state(PlaylistSettings.waiting_for_reverse)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

@dp.message(PlaylistSettings.waiting_for_reverse)
async def process_reverse(message: types.Message, state: FSMContext):
    text = message.text.strip()
    if text not in ["0", "1"]:
        await message.answer("‚ùå –í–≤–µ–¥–∏ 0 (–æ–±—ã—á–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫) –∏–ª–∏ 1 (–æ–±—Ä–∞—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫):")
        return
    
    reverse = text == "1"
    await state.update_data(reverse=reverse)
    
    await message.answer(
        f"‚úÖ –ü–æ—Ä—è–¥–æ–∫: {'–æ–±—Ä–∞—Ç–Ω—ã–π' if reverse else '–∫–∞–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ'}\n\n"
        "üì¶ –°–∫–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞ —Ä–∞–∑?\n"
        "(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 20-50, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ):"
    )
    await state.set_state(PlaylistSettings.waiting_for_batch_size)

@dp.message(PlaylistSettings.waiting_for_batch_size)
async def process_batch_size(message: types.Message, state: FSMContext):
    try:
        batch_size = int(message.text.strip())
        if batch_size < 1 or batch_size > 100:
            await message.answer("‚ùå –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        settings = {
            "start": data["start"],
            "end": data["end"],
            "reverse": data["reverse"],
            "batch_size": batch_size
        }
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        await message.answer(
            f"üìã –ò—Ç–æ–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            f"‚Ä¢ –í–∏–¥–µ–æ: —Å #{settings['start']} –ø–æ #{settings['end'] if settings['end'] != 999999 else '–ø–æ—Å–ª–µ–¥–Ω–µ–µ'}\n"
            f"‚Ä¢ –ü–æ—Ä—è–¥–æ–∫: {'–æ–±—Ä–∞—Ç–Ω—ã–π' if settings['reverse'] else '–∫–∞–∫ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ'}\n"
            f"‚Ä¢ –ü–∞–∫–µ—Ç: {batch_size} –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑\n\n"
            f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É..."
        )
        
        await process_playlist(message, state, settings)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

async def process_playlist(message: types.Message, state: FSMContext, settings: dict):
    data = await state.get_data()
    playlist_url = data["playlist_url"]
    
    await message.answer("üîç –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ... (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤)")

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ yt-dlp
        result = subprocess.run(
            ["yt-dlp", "--version"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        if result.returncode != 0:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: yt-dlp –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
            await state.clear()
            return

        await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç...")

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        cmd = ["yt-dlp", "--flat-playlist", "--dump-json"]
        
        if settings["start"] > 1:
            cmd.extend(["--playlist-start", str(settings["start"])])
            
        if settings["end"] != 999999:
            cmd.extend(["--playlist-end", str(settings["end"])])
            
        if settings["reverse"]:
            cmd.append("--playlist-reverse")
            
        cmd.append("--ignore-errors")
        cmd.append(playlist_url)

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
        result = subprocess.run(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True,
            timeout=120  # –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        )

        if result.returncode != 0:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {result.stderr}")
            await state.clear()
            return

        video_count = 0
        batch_size = settings["batch_size"]
        
        for line in result.stdout.splitlines():
            if line.strip():  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                try:
                    data_json = json.loads(line)
                    if "id" in data_json:
                        video_url = f"https://www.youtube.com/watch?v={data_json['id']}"
                        title = data_json.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        await message.answer(f"üé¨ {title}")
                        await message.answer(video_url)
                        await message.answer("‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
                        video_count += 1
                        
                        # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–∞—É–∑—ã
                        if video_count % batch_size == 0:
                            await message.answer(f"üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {video_count} –≤–∏–¥–µ–æ...")
                            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞
                            
                except json.JSONDecodeError:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è JSON

        if video_count == 0:
            await message.answer("‚ùå –í–∏–¥–µ–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        else:
            await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {video_count} –≤–∏–¥–µ–æ!")
            
    except subprocess.TimeoutExpired:
        await message.answer("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–ª–µ–π–ª–∏—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω.")
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)
@dp.message()
async def handle_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state:
        return  # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    playlist_url = message.text.strip()
    if "youtube.com/playlist" in playlist_url or "youtu.be/" in playlist_url:
        await state.update_data(playlist_url=playlist_url, is_quick=True)
        await process_playlist(message, state, {
            "start": 1,
            "end": 999999,
            "reverse": False,
            "batch_size": 50
        })
    else:
        await message.answer(
            "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –ø–ª–µ–π–ª–∏—Å—Ç.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /cut - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n"
            "‚Ä¢ /quick - –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞"
        )

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é –±–æ—Ç–∞"""
    commands = [
        types.BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–∞—è - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        types.BotCommand(command="cut", description="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–µ–π–ª–∏—Å—Ç–∞"),
        types.BotCommand(command="quick", description="‚ö° –ë—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ"),
        types.BotCommand(command="help", description="üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º")
    ]
    await bot.set_my_commands(commands)

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é
        await set_bot_commands()
        print("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        await dp.start_polling(bot)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
